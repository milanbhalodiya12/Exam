//Student Controller for insert, edit, delete, MultipleDelete, Search(by fname and lname)

﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using WebApplication1.Models;

namespace WebApplication1.Controllers
{
    public class StudentController : Controller
    {
        // GET: Student
        public ActionResult Index(string searchText = "", string searchBy = "fname")
        {
            using (MyDBEntities db = new MyDBEntities())
            {
                // Filter students based on searchText and searchBy
                var students = db.Students.AsQueryable();

                if (searchBy == "fname")
                {
                    students = students.Where(s => s.fname.Contains(searchText));
                }
                else if (searchBy == "lname")
                {
                    students = students.Where(s => s.lname.Contains(searchText));
                }

                List<Student> std = students.ToList();
                return View(std);
            }
        }


        public ActionResult Delete(int id)
        {
            using (MyDBEntities db = new MyDBEntities())
            {
                Student student = db.Students.Find(id);
                if (student != null)
                {
                    db.Students.Remove(student);
                    db.SaveChanges();
                }
            }
            return RedirectToAction("Index");
        }

        [HttpPost]
        public ActionResult DeleteSelected(int[] selectedIds)
        {
            using (MyDBEntities db = new MyDBEntities())
            {
                if (selectedIds != null)
                {
                    foreach (int id in selectedIds)
                    {
                        Student student = db.Students.Find(id);
                        if (student != null)
                        {
                            db.Students.Remove(student);
                        }
                    }
                    db.SaveChanges();
                }
            }
            return RedirectToAction("Index");
        }

        public ActionResult Insert(int id = 0, string mode = "")
        {
            using (MyDBEntities db = new MyDBEntities())
            {
                Student student = new Student();
                if (id != 0)
                {
                    student = db.Students.Find(id);
                }
                else
                {
                    student = new Student();
                }
                ViewBag.mode = mode;
                ViewBag.id = id;

                return View(student);
            }
        }

        [HttpPost]
        public ActionResult InsertPost(Student s)
        {
            using (MyDBEntities db = new MyDBEntities())
            {
                string mode = Request["mode"];
                int id = Convert.ToInt32(Request["id"]);

                if (mode == "E")
                {
                    Student onestudent = db.Students.Find(id);
                    if (onestudent != null)
                    {
                        onestudent.fname = s.fname;
                        onestudent.lname = s.lname;

                        db.SaveChanges();
                    }
                }
                else
                {
                    db.Students.Add(s);
                    db.SaveChanges();
                }
            }
            return RedirectToAction("Index");
        }
    }
}



======================================================================================================================

// Index.cshtml  



﻿<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Records</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-4">
        <div class="card">
            <div class="card-body">
                <form method="get" action="/Student/Index">
                    <div class="form-group">
                        <label for="searchText">Search:</label>
                        <input type="text" id="searchText" name="searchText" value="@Request.QueryString["searchText"]" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label><input type="radio" name="searchBy" value="fname" checked /> First Name</label>
                        <label><input type="radio" name="searchBy" value="lname" /> Last Name</label>
                    </div>
                    <button type="submit" class="btn btn-success">Search</button>
                    <a href="/Student/Index" class="btn btn-secondary">Clear</a>
                </form>
            </div>
        </div>
        <div class="card mt-4">
            <div class="card-body">
                <form id="deleteForm" method="post" action="/Student/DeleteSelected">
                    <table class="table table-striped table-dark">
                        <thead>
                            <tr>
                                <th><input type="checkbox" id="selectAll" /></th>
                                <th>ID</th>
                                <th>Fname</th>
                                <th>LName</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td><input type="checkbox" name="selectedIds" value="@item.Id" /></td>
                                    <td>@item.Id</td>
                                    <td>@item.fname</td>
                                    <td>@item.lname</td>
                                    <td>
                                        <a href="/Student/insert?id=@item.Id&mode=E" class="btn btn-primary">Edit</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <button type="submit" onclick="return deletealert()" class="btn btn-danger">Delete Records</button>
                </form>
            </div>
        </div>
        <a href="/Student/insert" class="btn btn-success mt-4">Add Record</a>
        <script>
            function deletealert() {
                return confirm("Are you sure you want to delete the selected records?");
            }
            document.getElementById('selectAll').addEventListener('click', function () {
                var checkboxes = document.querySelectorAll('#deleteForm input[type="checkbox"]');
                for (var i = 0; i < checkboxes.length; i++) {
                    checkboxes[i].checked = this.checked;
                }
            });
        </script>
    </div>
</body>
</html>


========================================================================================================================

// Insert.cshtml


﻿@model WebApplication1.Models.Student
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Insert</title>
</head>
<body>
    <div>
        <a href="/Student/index">Back To Table</a>
        <form action="/Student/InsertPost" method="post">
            <input type="hidden" name="mode" value="@ViewBag.mode" />
            <input type="hidden" name="id" value="@ViewBag.id" />
            <label>Fname</label>
            <input type="text" name="fname" value="@Model.fname" />

            <label>Lname</label>
            <input type="text" name="lname" value="@Model.lname" />

            <input type="submit" name="submit" value="submit" />
        </form>
    </div>
</body>
</html>


===========================================================================================================================
// Register and login verification file (Controller file)


using registration.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace registration.Controllers
{
    public class studentController : Controller
    {
        // GET: student/registration
        public ActionResult registration()
        {
            return View();
        }

        // POST: student/registration
        [HttpPost]
        public ActionResult registration(User user)
        {
            using (StudentdataEntities DB = new StudentdataEntities())
            {
                if (ModelState.IsValid)
                {
                    // Check if the username already exists
                    bool usernameExists = DB.Users.Any(u => u.Username == user.Username);
                    if (usernameExists)
                    {
                        // Add a model error if the username is already taken
                        ModelState.AddModelError("Username", "Username is already registered.");
                        return View(user); // Return the view with the existing user data to show the error
                    }

                    // Hash the password
                    user.Password = HashPassword(user.Password);

                    // Add user to the database
                    DB.Users.Add(user);
                    DB.SaveChanges();

                    // Redirect to the login page after successful registration
                    return RedirectToAction("login", "student");
                }

                // If model state is not valid, return the view with existing user data
                return View(user);
            }
        }

        // GET: student/login
        public ActionResult login()
        {
            return View();
        }

        // POST: student/login
        [HttpPost]
        public ActionResult login(string username, string password)
        {
            // Hash the password first
            string hashedPassword = HashPassword(password);

            using (StudentdataEntities DB = new StudentdataEntities())
            {
                // Check if the user exists and the password is correct
                var user = DB.Users.SingleOrDefault(u => u.Username == username && u.Password == hashedPassword);

                if (user != null)
                {
                    // User is authenticated, redirect to index view
                    return RedirectToAction("index", "student"); // Assuming "Home" is your main controller and "Index" is the action
                }
                else
                {
                    // Invalid login, add model error
                    ModelState.AddModelError("", "Invalid username or password.");
                }
            }

            // If we got this far, something failed, redisplay the form
            return View();
        }
        public ActionResult index()
        {
            return View();
        }

        // Password hashing method (placeholder for actual implementation)
        private string HashPassword(string password)
        {
            // Use a real hashing algorithm (e.g., BCrypt) in production
            return password; // Replace with actual hashing logic
        }
    }
}

=========================================================================================================================

//View file (Register page)


@model registration.Models.User

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registration Form</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .error-message {
            color: red;
        }

        .strength-meter {
            height: 5px;
            border-radius: 5px;
            margin-top: 5px;
        }

        .weak {
            background-color: red;
        }

        .medium {
            background-color: orange;
        }

        .strong {
            background-color: green;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-6">
                <h2 class="text-center">Register</h2>
                @using (Html.BeginForm("Registration", "Student", FormMethod.Post, new { id = "registrationForm" }))
                {
                    @Html.ValidationSummary(true)

                    <div class="form-group">
                        @Html.LabelFor(m => m.FullName)
                        @Html.TextBoxFor(m => m.FullName, new { @class = "form-control", placeholder = "Enter your full name", required = "required", style = "width: 100%; max-width: 100%;" })
                        @Html.ValidationMessageFor(m => m.FullName, "", new { @class = "error-message text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.Username)
                        @Html.TextBoxFor(m => m.Username, new { @class = "form-control", placeholder = "Choose a username", required = "required", style = "width: 100%; max-width: 100%;" })
                        @Html.ValidationMessageFor(m => m.Username, "", new { @class = "error-message text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.City)
                        @Html.TextBoxFor(m => m.City, new { @class = "form-control", placeholder = "Your city", required = "required", style = "width: 100%; max-width: 100%;" })
                        @Html.ValidationMessageFor(m => m.City, "", new { @class = "error-message text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.Email)
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "example@domain.com", title = "Enter a valid email address", required = "required", type = "email", style = "width: 100%; max-width: 100%;" })
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "error-message text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.Phone)
                        @Html.TextBoxFor(m => m.Phone, new { @class = "form-control", placeholder = "Your phone number", required = "required", type = "tel", pattern = @"^\+?[1-9]\d{1,14}$", title = "Please enter a valid phone number", style = "width: 100%; max-width: 100%;" })
                        @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "error-message text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.DateOfBirth)
                        @Html.TextBoxFor(m => m.DateOfBirth, new { @class = "form-control", type = "date", required = "required", style = "width: 100%; max-width: 100%;" })
                        @Html.ValidationMessageFor(m => m.DateOfBirth, "", new { @class = "error-message text-danger" })
                    </div>

                    <div class="form-group">
                        <label>Gender:</label><br />
                        @Html.RadioButtonFor(m => m.Gender, "male", new { required = "required" }) Male
                        @Html.RadioButtonFor(m => m.Gender, "female", new { required = "required" }) Female
                        @Html.ValidationMessageFor(m => m.Gender, "", new { @class = "error-message text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.Password)
                        @Html.PasswordFor(m => m.Password, new
                        {
                            @class = "form-control",
                            placeholder = "Create a password",
                            oninput = "checkPasswordStrength(this.value)",
                            required = "required",
                            style = "width: 100%; max-width: 100%;"
                        })
                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "error-message text-danger" })
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary btn-block">Register</button>
                    </div>
                }
            </div>
        </div>
    </div>
</body>
</html>


========================================================================================================================

// Login page 

@model registration.Models.User

@{
    ViewBag.Title = "Login";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Form</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            padding: 20px;
        }

        .form-container {
            max-width: 400px;
            margin: auto;
            background: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 15px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
            }

            .form-group input {
                width: 100%;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 4px;
            }

            .form-group button {
                width: 100%;
                padding: 10px;
                background-color: #007bff;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }

                .form-group button:hover {
                    background-color: #0056b3;
                }

        .text-danger {
            color: red;
        }

        .registration-button {
            margin-top: 15px;
            background-color: #28a745;
        }

            .registration-button:hover {
                background-color: #218838;
            }
    </style>
</head>
<body>

    <div class="form-container">
        <h2>Login</h2>
        @using (Html.BeginForm("login", "student", FormMethod.Post))
        {
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(m => m.Username, "Username")
                @Html.TextBoxFor(m => m.Username, new { @class = "form-control", required = "required" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Password, "Password")
                @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "required" })
            </div>
            <div class="form-group">
                <button type="submit">Login</button>
            </div>
            <div class="form-group">
                @Html.ActionLink("Register", "registration", "student", null, new { @class = "registration-button", @style = "display: block; text-align: center; padding: 10px; color: white; text-decoration: none; border-radius: 4px;" })
            </div>
        }
    </div>

</body>
</html>
